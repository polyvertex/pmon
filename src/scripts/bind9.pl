#!/usr/bin/env perl
#
# PMon
# A small monitoring system for Linux written in Perl.
#
# Copyright (C) 2013-2015 Jean-Charles Lefebvre <polyvertex@gmail.com>
#
# This software is provided 'as-is', without any express or implied
# warranty.  In no event will the authors be held liable for any damages
# arising from the use of this software.
#
# Permission is granted to anyone to use this software for any purpose,
# including commercial applications, and to alter it and redistribute it
# freely, subject to the following restrictions :
#
# 1. The origin of this software must not be misrepresented; you must not
#    claim that you wrote the original software. If you use this software
#    in a product, an acknowledgment in the product documentation would be
#    appreciated but is not required.
# 2. Altered source versions must be plainly marked as such, and must not
#    be misrepresented as being the original software.
# 3. This notice may not be removed or altered from any source distribution.
#
# Created On: 2013-03-12 15:10:58Z
#

use strict;
use warnings;

sub SECID_IN_REQUESTS () { 1 }
sub SECID_OUT_QUERIES () { 2 }
#
sub SECID__UNHANDLED  () { 0 }
sub SECID__COUNT      () { 2 } # CAUTION: must be the number of sections we want to read!


$ENV{'LC_ALL'} = 'POSIX';

my $rndc_cmd   = (@ARGV >= 1) ? $ARGV[0] : 'rndc';
my $stats_file = (@ARGV >= 2) ? $ARGV[1] : '/var/cache/bind/named.stats';
my $now        = time;


unlink($stats_file)
    if -e $stats_file;
system($rndc_cmd, 'stats') == 0
    or die "Failed to run the 'rndc' command!\n";
open(my $fh, '<', $stats_file)
    or die "Failed to open $stats_file! $!\n";

my $section       = SECID__UNHANDLED; # current section
my $sections_done = 0;
my $view          = ''; # name of the current view
my $req_in        = 0;
my $req_out       = 0;

while (<$fh>)
{
    chomp;
    if (substr($_, 0, 2) eq '--') # end of statistics?
    {
        last;
    }
    elsif (substr($_, 0, 2) eq '++') # changing section?
    {
        my $new_section = SECID__UNHANDLED;

        if (/^\++\s+Statistics\s+Dump\s+\++\s+\((\d+)\)$/)
        {
            # check the stats file timestamp against $now to ensure we have
            # the correct file path. 15 seconds of delta should be safe enough!
            die "The $stats_file file probably has not been generated by us! ",
                "Please check your configuration files to ensure the ",
                "specified stats file is correct!\n"
                if abs($1 - $now) > 15;
        }
        elsif (/Incoming\s+Requests/)
        {
            $new_section = SECID_IN_REQUESTS;
        }
        elsif (/Outgoing\s+Queries/)
        {
            $new_section = SECID_OUT_QUERIES;
        }

        if ($section != SECID__UNHANDLED)
        {
            ++$sections_done;
            last if $sections_done >= SECID__COUNT # did we read everything we wanted?
        }
        $section = $new_section;
        $view    = '';
    }
    elsif ($section == SECID_IN_REQUESTS and /^\s*(\d+)\s+QUERY$/)
    {
        $req_in = $1;
    }
    elsif ($section == SECID_OUT_QUERIES)
    {
        if (/^\[View:\s+([^\]]+)\]/i)
        {
            $view = lc $1;
        }
        elsif ($view eq 'default' and /^\s*(\d+)\s+/)
        {
            $req_out += int $1;
        }
    }
}

close $fh;
unlink $stats_file;

print
    "named.req.in $req_in\n",
    "named.req.out $req_out\n";
